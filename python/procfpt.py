#Written by Eric Bell
#3/23/17
#
#procfpt.py processes the .fpt file generated by OBabel by converting the fpt to binary and appending the binding affinity

import sys
from re import search

args = sys.argv
if len(args)<3 or len(args)>4:
    print("Incorrect number of arguments")
    exit(1)

try:
    f = open(args[1],"r") #argument 1 is the filename of the .fpt to be processed
    if len(args) > 3:
        w = open(args[3],"w") #argument 3 is the name of the output .csv, defaults to "proc.csv"
    else:
        w = open("proc.csv","w")
except:
    print("Error opening file")
    exit(1)

#fetchEnergy searches the text file (a res.txt) for the molecule mol and returns its binding affinity
def fetchEnergy(mol):
    fi = open(args[2],"r") #argument 2 is the filename of the res.txt-like text file that contains the molecules and their predicted binding affinities
    grepline=""
    for line in fi:
        if search(mol,line):
            grepline=line
            break
    if grepline=="":
        return None
    else:
        try:
            energy=grepline.split(" ")[1]
            return energy
        except:
            print("There was a problem processing molecule "+mol+": "+str(sys.exc_info()[0]))
            return None

#write each line using the ZINC ID, fixed fingerprint (removed leading zeros and reversed bit positions), and binding affinity
zinc=None
fpt=""
for line in f:
    if line[0] == ">":
        if zinc and fpt:
            fpt=''.join(fpt.split())
            bitstring=str(bin(int(fpt,16)))[2:]
            zerocount=307-len(bitstring)
            bitstring='0'*zerocount+bitstring
            w.write(zinc+","+bitstring[::-1]+","+fetchEnergy(zinc))
        zinc=line.split()[0][1:]
        fpt=""
    else:
        fpt+=line

f.close()
w.close()

